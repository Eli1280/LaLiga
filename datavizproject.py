# -*- coding: utf-8 -*-
"""DataVizproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vmuLu4hy701hSxespfrdnVBQRngeQ8J5
"""
import plotly.express as px
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from dataframes import load_dataframes


# Load the CSV files
home_table_df = pd.read_csv('Laliga_table_home_2023_24.csv')
away_table_df = pd.read_csv('Laliga_table_away_2023_24.csv')
overall_table_df = pd.read_csv('Laliga_table_2023_24.csv')
team_goals_df = pd.read_csv('team_goals_per_match.csv')
team_ratings_df = pd.read_csv('team_ratings.csv')
team_tackles_df = pd.read_csv('won_tackle_team.csv')
player_goals_df = pd.read_csv('player_goals_per_90.csv')


# Streamlit app
st.title("LaLiga Dashboard 2023/24")

# Sidebar for navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Overview", "Team Statistics", "Player Statistics"])

# Page: Overview
if page == "Overview":
    st.header("Overview of LaLiga 2023/24")
    st.write("Comparison of Home and Away Performance")

    home_table_df['location'] = 'Home'
    away_table_df['location'] = 'Away'

    combined_df = pd.concat([
        home_table_df[['name', 'pts', 'wins', 'draws', 'losses', 'goalConDiff', 'location']],
        away_table_df[['name', 'pts', 'wins', 'draws', 'losses', 'goalConDiff', 'location']]
    ])

    fig = px.bar(combined_df, x='name', y='pts', color='location',
                 title='Points Comparison: Home vs Away vs Overall',
                 labels={'pts': 'Points', 'name': 'Team'},
                 category_orders={'location': ['Home', 'Away', 'Overall']})
    st.plotly_chart(fig)

# Page: Team Statistics
elif page == "Team Statistics":
    st.header("Team Statistics")
    st.write("Explore team performance in different metrics.")

    # Goals per match
    st.subheader("Goals Per Match")
    fig_goals = px.bar(team_goals_df, x='Team', y='Goals per Match', title='Goals per Match by Team')
    st.plotly_chart(fig_goals)

    # Team ratings
    st.subheader("Team Ratings")
    fig_ratings = px.bar(team_ratings_df, x='Team', y='FotMob Team Rating', title='Team Ratings')
    st.plotly_chart(fig_ratings)

    # Tackles won
    st.subheader("Tackles Won")
    fig_tackles = px.bar(team_tackles_df, x='Team', y='Successful Tackles per Match', title='Tackles Won by Team')
    st.plotly_chart(fig_tackles)

# Page: Player Statistics
selected_datasets = st.multiselect(
    "Sélectionnez les DataFrames à utiliser:",
    options=list(dataframes.keys()),
    default=list(dataframes.keys())[:2]
)

# Sélectionner les joueurs à comparer
selected_players = st.multiselect(
    "Sélectionnez les joueurs à comparer:",
    options=dataframes['Goals per Match']['Player'].unique(),
    default=dataframes['Goals per Match']['Player'].unique()[:2]
)

# Filtrer les données des joueurs sélectionnés
filtered_dfs = {}
for dataset in selected_datasets:
    filtered_dfs[dataset] = dataframes[dataset][dataframes[dataset]['Player'].isin(selected_players)]

# Exemple de comparaison avec un radar chart pour un DataFrame (par exemple 'Goals per Match')
if 'Goals per Match' in selected_datasets:
    df_goals = filtered_dfs['Goals per Match']
    fig = go.Figure()

    for player in selected_players:
        player_data = df_goals[df_goals['Player'] == player].iloc[0]
        fig.add_trace(go.Scatterpolar(
            r=[player_data['Goals per Match'], player_data['Total Goals Scored'], player_data['Matches']],
            theta=['Goals per Match', 'Total Goals Scored', 'Matches'],
            fill='toself',
            name=player
        ))

    fig.update_layout(
        polar=dict(
            radialaxis=dict(visible=True, range=[0, max(df_goals['Goals per Match'].max(), df_goals['Total Goals Scored'].max(), df_goals['Matches'].max())])
        ),
        showlegend=True,
        title='Comparaison des Joueurs'
    )
    st.plotly_chart(fig)
elif page == "Player Statistics":
    st.header("Player Statistics")
    st.write("Compare performance of players in LaLiga.")

    # Select players to compare
    selected_players = st.multiselect(
        "Select players to compare:",
        options=player_goals_df['Player'].unique(),
        default=player_goals_df['Player'].unique()[:2]  # Pre-select the first two players
    )

    if selected_players:
        filtered_df = player_goals_df[player_goals_df['Player'].isin(selected_players)]
        fig_players = px.bar(filtered_df, x='Player', y='Goals per 90',
                             title='Goals Per 90 Minutes Comparison',
                             labels={'Goals per 90': 'Goals per 90 Minutes', 'Player': 'Player'})
        st.plotly_chart(fig_players)
    else:
        st.write("Select players to see their comparison.")

